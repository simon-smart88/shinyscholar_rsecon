---
title: "Shinyscholar"
subtitle: "A template for creating reproducible Shiny applications in R"
author: "Simon Smart and Tim Lucas, School of Medical Sciences, University of Leicester"
format: 
  revealjs:
    logo: images/uol_logo.png
    code-line-numbers: false
    theme: [default, custom.scss]
    width: 1600  
    height: 900
    scale: true
    slide-number: true
date: "2025-09-09"
date-format: "Do MMMM YYYY"
---

## Shinyscholar helps create reproducible analytical apps in R {.mediumtext}

::: columns
::: {.column width="70%"}
-   Creates an empty application with a regular structure
-   Analyses can be reproduced outside the app
:::
::: {.column width="30%"}
<img src="images/ss_logo.png" width="auto" height="auto" align="right" alt="Hex logo of shinyscholar showing a black and white mortar cap">
:::
:::

## Shinyscholar helps create reproducible analytical apps in R {.mediumtext}

::: columns
::: {.column width="70%"}
-   Creates an empty application with a regular structure
-   Analyses can be reproduced outside the app
-   Make it easier to follow software development best practices
-   Developers can concentrate on creating functionality 
:::
::: {.column width="30%"}
<img src="images/ss_logo.png" width="auto" height="auto" align="right" alt="Hex logo of shinyscholar showing a black and white mortar cap">
:::
:::

::: notes

Testing, modularised, maintainable

:::

## R has cutting-edge statistical methods but barriers can restrict uptake

- Know how to use R 

## R has cutting-edge statistical methods but barriers can restrict uptake

- Know how to use R 
- Able to comprehend documentation

## R has cutting-edge statistical methods but barriers can restrict uptake

- Know how to use R 
- Able to comprehend documentation
- Access to specific data

## R has cutting-edge statistical methods but barriers can restrict uptake

- Know how to use R 
- Able to comprehend documentation
- Access to specific data
- Format data in specific ways

::: notes

Especially targeting technical users, but who might not code. Conservationists, analysts, medical practitioners 
:::

## Shiny apps enable anybody to access the power of R {.mediumcode}

::: columns
::: {.column width="75%"}
<br/>
```{r eval = FALSE, echo = TRUE}
ui <- fluidPage(
  numericInput("number", "Enter a number", value = 5),
  textOutput("answer")
)

server <- function(input, output) {
  output$answer <- renderText(input$number * 10)
}

shinyApp(ui, server)
```
:::
::: {.column width="25%"}
<br/>
<img src="images/basic_app.png" alt="A screenshot of a basic shiny app displaying an input box to enter a number in and an output displaying the inputted number multiplied by ten.">
:::
:::

## Shiny apps are becoming increasingly popular in academia

::: columns
::: {.column width="55%"}
-   The low barrier to entry makes Shiny popular
-   Substantially increased apps as a method of dissemination
:::

::: {.column width="45%"}
<img src="images/published_apps.png" height = "650px" alt="A scatterplot showing the number of publications mentioning shiny apps from 2015 to 2023 showing exponential growth up to 134 papers in 2023.">

```{r echo = FALSE, fig.height=10}
# year <- c(2012, 2015:2023)
# apps <- c(1, 4, 3, 12, 17, 39, 69, 75, 100, 134)
# mod <- lm(log(apps) ~ year)
# #
# png("images/published_apps.png", height = 10, width = 10, units = "in", res = 72 )
# par(cex = 1.5, bg = '#e4fbf8')
# plot(year, apps, pch = 16, xlab = '', ylab = 'Number of publications')
# lines(seq(2012, 2023, 0.1), exp(predict(mod, data.frame(year = seq(2012, 2023, 0.1)))), col = 'blue')
# dev.off()
```

:::
:::

::: {.notes}
- Easier to develop than using other web frameworks
- Existing code can be adapted
:::

## Current apps do not follow best practices 
<img src="images/app_features.svg" class="centre_image" alt = "A bargraph showing the results of surveying 50 published apps for features: citing packages in the paper, citing packages in the app, instructions included in the app, logging, reproducibility, saving and loading. Then whether the source code was available, whether it contained functions, was modular, formatted as a package and contained unit and end-to-end tests. Apart from citing packages in the paper and source code being available, the majority of apps lacked features.">

## Wallace bucked the trend {.smalltext}
<img src="images/wallace.png" class="centre_image" alt = "A screenshot of the Wallace app used to model species distributions. A sidebar shows that an option to load occurrence data from a database is selected and the species Paraponera clavata is selected with the point data where the species has been observed plotted on the map." height = 700>

Kass *et al.* (2022) <a href="https://doi.org/10.1111/ecog.06547" target="_blank">DOI: 10.1111/ecog.06547</a> `install.packages("wallace")` (not online)

::: notes
-   Error messages
-   Logging
-   Save and load
-   Reproducible
-   Cites packages used

- Take the lessons learnt from them and make available to all
- We were going to reuse Wallace as the basis for a new app, so it seemed to make sense to make it available to others
- Lead onto modules here - i.e. occ_queryDb
:::

## `modules` contains information about each module {.mediumcode}

```{r eval = FALSE, echo = TRUE}
modules <- data.frame(
"component" = "transform",
"long_component" = "Transform numbers",
"module" = "multiply",
"long_module" = "Multiply a number",
"map" = FALSE,
"result" = TRUE,
"rmd" = TRUE,
"save" = TRUE,
"download" = FALSE,
"async" = FALSE)
```

## `create_template()` creates the skeleton app {.mediumcode}

```{r eval = FALSE, echo = TRUE}
shinyscholar::create_template(
  path = file.path("~", "Documents"), 
  name = "demo", 
  author = "Simon Smart",
  include_map = FALSE, 
  include_table = FALSE, 
  include_code = FALSE, 
  common_objects = "result", 
  modules = modules, 
  install = TRUE)

demo::run_demo()
```

## `create_template()` creates the skeleton app

<img src="images/demo_app.png" class="centre_image" alt="A screenshot of the app running after running the create_template function. A navigation bar at the top enables navigation between components and a menu in the sidebar enables navigation between modules. A logger window is present towards the top of the display and an empty results tab shown in the main panel." >

## Reproducibility relies on each module calling one function {.mediumcode}

Create the function:
```{r echo = TRUE, eval=FALSE}
transform_multiply <- function(number) number * 10
```

## Reproducibility relies on each module calling one function {.mediumcode}

Create the function:
```{r echo = TRUE, eval=FALSE}
transform_multiply <- function(number) number * 10
```

Use it in the module and store the input:
```{r echo = TRUE, eval=FALSE}
common$result <- transform_multiply(input$number)
common$meta$transform_multiply$number <- input$number
```

## Reproducibility relies on each module calling one function {.mediumcode}

Create the function:
```{r echo = TRUE, eval=FALSE}
transform_multiply <- function(number) number * 10
```

Use it in the module and store the input:
```{r echo = TRUE, eval=FALSE}
common$result <- transform_multiply(input$number)
common$meta$transform_multiply$number <- input$number
```

In the Rmarkdown:
```{r echo = TRUE, eval=FALSE}
result <- transform_multiply({{transform_multiply_number}})
```

## Reproducibility relies on each module calling one function {.mediumcode}

Create the function:
```{r echo = TRUE, eval=FALSE}
transform_multiply <- function(number) number * 10
```

Use it in the module and store the input:
```{r echo = TRUE, eval=FALSE}
common$result <- transform_multiply(input$number)
common$meta$transform_multiply$number <- input$number
```

In the Rmarkdown:
```{r echo = TRUE, eval=FALSE}
result <- transform_multiply({{transform_multiply_number}})
```

`metadata()` takes care of a lot of the boring code


## Disagapp for disaggregation regression

::: columns
::: {.column width="80%"}
<img src="images/disagapp.png" height = "700px" alt="Screenshot of the disagapp app, displaying cases of Malaria in provinces of Madagascar">
:::
::: {.column width="20%"}
<img src="images/disagapp_qr.png" alt="QR code to https://disagapp.le.ac.uk" >
:::
:::

## MetaInsight for network metaanalysis

::: columns
::: {.column width="80%"}
<img src="images/metainsight.png" alt="Screenshot of the metainsight app, displaying two forest plots">
:::
::: {.column width="20%"}
<img src="images/metainsight_qr.png" alt="QR code to https://crsu.shinyapps.io/MetaInsight_Scholar/">
:::
:::

## Learn more

- `install.packages("shinyscholar")`
- Example app at https://simonsmart.shinyapps.io/shinyscholar/ `install.packages("shinyscholar", dependencies = TRUE)`
- README guide to development at https://simon-smart88.github.io/shinyscholar/
- <a href = "https://sites.google.com/view/dariia-mykhailyshyna/main/r-workshops-for-ukraine#h.svl2ujruwf92">Workshop for Ukraine</a>

## Acknowledgments

::: columns
::: {.column width="70%"}
-   Wellcome for funding
-   Wallace developers especially Rob Anderson
-   Tim Lucas
:::

::: {.column width="30%"}
<div> 
<img src="images/wellcome_logo.png" width="300" style = "display: block;" alt = "Wellcome logo">
<img src="images/wallace_logo.png" width="300" style = "display: block;" alt = "Wallace hex logo">
</div>
:::
:::
